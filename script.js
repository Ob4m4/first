/*Описание: На странице есть кнопка <button id="toggle-visibility">Переключить видимость</button>
и несколько элементов <div class="content-box"> с текстом "Скрываемый текст".
 Напиши скрипт, который при клике на кнопку будет переключать видимость всех элементов с
  классом content-box. Когда элементы видимы, их текст должен отображаться. Когда элементы скрыты,
   их текст не должен быть виден.

Подсказка: Используй методы getElementsByClassName, style.display, и флаг для отслеживания текущего состояния (видимы элементы или нет).*/

// const divs = document.getElementsByClassName('content-box');
// const btn = document.getElementById('toggle-visibility');
// console.log(divs);
// let isTextVisible = true;

// btn.addEventListener('click', ()=>{
//     for(let div of divs) {
//         if(isTextVisible) {
//             div.style.display = 'none'
//         } else {
//             div.style.display = 'block'
//         }
//     }
//     isTextVisible = !isTextVisible;
// });

/*Описание: На странице есть кнопка <button id="toggle-visibility">Скрыть текст</button> и несколько
 элементов <div class="content-box"> с текстом "Текст для скрытия". Напиши скрипт, который при клике
  на кнопку будет:

Переключать видимость всех элементов с классом content-box.
Менять текст на кнопке в зависимости от текущего состояния (например, если текст видим, на кнопке
 должно быть написано "Скрыть текст", а если скрыт — "Показать текст").
Подсказка: Используй методы getElementsByClassName, style.display, textContent, и флаг для
 отслеживания текущего состояния.*/

// const btn = document.getElementById('toggle-visibility');
// const divs = document.getElementsByClassName("content-box");

// let isContentVisible = true;

// btn.addEventListener('click', ()=>{
//     for(let div of divs) {
//         if (isContentVisible) {
//             btn.textContent = 'Показать текст';
//             div.style.backgroundColor = "#cccccc";
//             div.textContent = '';
//         } else {
//             btn.textContent = 'Скрыть текст';
//             div.textContent = 'Текст для скрытия';
//             div.style.backgroundColor = "rgb(92, 77, 77)";
//         }
//     }
//     isContentVisible = !isContentVisible;
// })
/*Задача: Переключение видимости, изменение текста кнопки, динамическое создание и удаление элементов,
 управление свойствами через JavaScript

Описание: На странице есть кнопка <button id="toggle-visibility">Скрыть текст</button>
 и несколько элементов <div class="content-box"> с текстом "Текст для скрытия". Напиши скрипт, который
  при клике на кнопку будет:

Переключать видимость всех элементов с классом content-box.
Менять текст на кнопке в зависимости от текущего состояния (если текст видим, на кнопке
 должно быть написано "Скрыть текст", а если скрыт — "Показать текст").
Динамически добавлять новый элемент <div class="content-box"> с текстом "Новый элемент"
 в конец списка при каждом нажатии на кнопку. Новый элемент должен также подчиняться
  всем правилам видимости и изменений.
При каждом пятом клике на кнопку удалять последний элемент из списка.
Изменять цвет текста на случайный цвет при каждом нажатии на кнопку.
Подсказка: Используй методы getElementsByClassName, createElement, appendChild, removeChild,
 и управляй состоянием через переменные и флаги. Также подумай, как генерировать случайные
  цвета в JavaScript.*/

// const btn = document.getElementById('toggle-visibility');
// const divs = document.getElementsByClassName('content-box');
// const newDiv = document.createElement('div');

// let isTextVisible = true;

// btn.addEventListener('click', ()=>{
//     for(let div of divs) {

//         newDiv.textContent = 'Новый элемент';
//         newDiv.setAttribute("class", "content-box");
//         div.parentNode.appendChild(newDiv);
//         if(divs.length = 8) {
//             div.parentNode.removeChild(divs.length - 1);
//         } else if (isTextVisible) {
//             btn.textContent = 'Показать текст';

//         }
//     }
// })
/*Задача 7: Создание и добавление кнопок
Описание: На странице есть контейнер <div id="button-container"></div>. Напиши скрипт, который
 создаст и добавит в этот контейнер три кнопки с текстом "Кнопка 1", "Кнопка 2", "Кнопка 3".
  Каждая кнопка должна иметь обработчик события, который при нажатии выводит в консоль
   текст кнопки.
Подсказка: Используй методы createElement, appendChild, и addEventListener.*/

// const div = document.getElementById('button-container');

// function btnCreater (num){
//     const btn = document.createElement('button');
//     div.appendChild(btn);
//     btn.textContent = `Кнопка ${num}`;
//     btn.addEventListener('click', ()=>{
//         console.log(btn.textContent);
//     })
// };
// btnCreater(1);
// btnCreater(2);
// btnCreater(3);

/*Задача 8: Переключение видимости элемента
Описание: На странице есть элемент <div id="toggle-box">Скрытый текст</div> и кнопка
 <button id="toggle-button">Скрыть/Показать</button>. Напиши скрипт, который будет
  переключать видимость элемента <div> при нажатии на кнопку.

Подсказка: Используй методы getElementById, style.display, и addEventListener.*/

//  const btn = document.getElementById("toggle-button");
//     const div = document.getElementById("toggle-box");
//     let isTextVisible = true;

//     btn.addEventListener('click', ()=>{
//         if(isTextVisible) {
//             div.style.display = 'none';
//         } else {
//             div.style.display = 'block'
//         }
//         isTextVisible = !isTextVisible
//     });

/*Задача 9: Перемещение элемента
Описание: На странице есть два контейнера <div id="container1"></div> и <div id="container2"></div>.
 Напиши скрипт, который переместит элемент из container1 в container2 при клике на него.

Подсказка: Используй методы getElementById, appendChild, и addEventListener.*/

// const div1 = document.getElementById("container1");
// const div2 = document.getElementById("container2");
// const btn = document.getElementById("toggle-button");

// div1.addEventListener('click', ()=>{
//     div2.appendChild(btn)
// });

// div2.addEventListener('click', ()=>{
//     div1.appendChild(btn)
// });
/*Описание: Создай на странице элемент <div id="countdown">10</div>. Напиши скрипт, который будет уменьшать значение внутри этого элемента на единицу каждую секунду, пока оно не достигнет нуля.

Подсказка: Используй методы getElementById и setInterval.

Попробуй решить эти задачи, и если у тебя возникнут вопросы или сложности, я с радостью помогу!*/

// const section = document.getElementsByTagName("section")[0];
// const div = document.createElement("div");
// section.appendChild(div);
// div.id = "countdown";
// div.textContent = 10;

// setInterval(() => {
//   if (div.textContent === 0) {
//     clearInterval()
//   } else {
//     div.textContent -= 1;
//   }
// }, 1000);

// // Задача 1: Динамическое отображение текущего времени
// // Описание: Создай элемент <div> на странице, который будет показывать текущее время (часы, минуты, секунды)
// //  и обновляться каждую секунду. Время должно обновляться в формате HH:MM:SS.

// // Подсказка: Используй setInterval для обновления времени каждую секунду.

// const section = document.getElementsByTagName("section")[0];
// const div = document.createElement('div');
// section.appendChild(div);
// setInterval(()=>{
//     div.textContent = Date();

// },1000);

// Задача 2: Прогресс-бар с таймером
// Описание: Создай элемент <div id="progress-bar"></div> на странице, который будет работать как прогресс-бар.
//  Прогресс-бар должен заполняться в течение 10 секунд и останавливаться, когда будет полностью заполнен.

// Подсказка: Используй setInterval для увеличения ширины прогресс-бара с течением времени.

// Задача 3: Обратный отсчёт с кнопкой паузы
// Описание: Создай элемент <div id="timer"></div>, который будет выполнять обратный отсчёт с 20 до 0.
//  Добавь кнопку "Пауза", которая будет останавливать отсчёт при нажатии, и кнопку "Продолжить", которая будет
//   возобновлять его.

// // Подсказка: Используй setInterval и clearInterval для управления таймером, а также обработчики
//  событий для кнопок.

// const section = document.getElementsByTagName('section')[0];
// const div = document.createElement('div');
// div.id = 'timer'
// section.appendChild(div);
// div.textContent = 20;

// const btnPause = document.createElement('button');
// btnPause.textContent = 'Пауза';
// section.appendChild(btnPause);
// btnPause.addEventListener('click', ()=>{

// })

// const btnPlay = document.createElement('button');
// btnPlay.textContent = 'Продолжить'
// section.appendChild(btnPlay);
// btnPlay.addEventListener('click', ()=>{})

// let countdown = setInterval(()=>{
//     if(Number(div.textContent) === 0) {
//         clearInterval(countdown)
//     } else {
//         div.textContent = Number(div.textContent) - 1
//     }
// },1000);

// Задача 4: Анимация текста
// Описание: Создай элемент <div id="animated-text">Текст</div>, который будет перемещаться
//  слева направо по странице в течение 5 секунд. После достижения правого края текст должен вернуться
//   в исходное положение и начать движение заново.

// Подсказка: Используй setInterval для изменения позиции left с течением времени.

// Задача 5: Автоматическая смена изображений
// Описание: Создай слайдер изображений. Создай элемент <img id="slider">, и три изображения в массиве.
//  Изображения должны автоматически меняться каждую секунду. Когда достигнуто последнее изображение,
//   слайдер должен начинаться с первого изображения.

// Подсказка: Используй массив для хранения путей изображений и setInterval для автоматической смены.

// Задача 6: Секундомер
// Описание: Создай элемент <div id="stopwatch">00:00</div> и две кнопки: "Старт" и "Сброс".
//  При нажатии на "Старт", секундомер должен начать отсчёт времени в формате MM:SS.
//   Кнопка "Сброс" должна останавливать отсчёт и сбрасывать время до 00:00.

// Подсказка: Используй setInterval для отсчёта времени и clearInterval для остановки таймера.

// Задача 7: Задержка появления текста
// Описание: Создай элемент <div id="delayed-text">Привет!</div>, который изначально скрыт.
//  Сделай так, чтобы текст в элементе появился на экране через 5 секунд после загрузки страницы.

// Подсказка: Используй setTimeout для задержки отображения текста.

// Задача 8: Последовательное изменение цвета фона
// Описание: Создай элемент <div id="color-box"></div> и массив с разными цветами.
//  Сделай так, чтобы цвет фона этого элемента менялся последовательно на следующий цвет из массива каждые 2 секунды.
//   Когда массив цветов закончится, цвет должен начать меняться с первого элемента массива.

// Подсказка: Используй массив для хранения цветов и setInterval для изменения цвета.

// Задача 9: Обратный отсчёт до действия
// Описание: Создай элемент <div id="action-countdown">10</div> и кнопку "Запустить".
//  Когда пользователь нажимает на кнопку, запускается обратный отсчёт с 10 до 0. Когда счётчик достигает 0,
//   на экране должно появиться сообщение "Действие выполнено!".

// Подсказка: Используй setTimeout или setInterval для создания обратного отсчёта.

// Задача 10: Бегущая строка
// Описание: Создай элемент <div id="marquee">Это бегущая строка!</div>, который будет
//  перемещаться справа налево по экрану. Когда текст полностью исчезает слева,
//   он должен снова появляться справа.

// Подсказка: Используй setInterval и изменяй позицию текста, используя свойства CSS position и left.

// const arr = [1, 2, 3, 4, 5, 6,]
/*Сумма всех элементов массива.
Дан массив чисел [5, 10, 15, 20, 25]. Используй forEach, чтобы найти сумму всех чисел в массиве.*/

// const arr = [5, 10, 15, 20, 25];
// let res = 0;
// arr.forEach((elem)=>{
//     res = elem + res

// });
// console.log(res);

/*Подсчёт количества элементов в массиве.
Дан массив ['a', 'b', 'a', 'c', 'a', 'b']. Используй forEach, чтобы посчитать, сколько раз символ 'a'
 встречается в массиве.*/

//  let arr = ["a", "b", "a", "c", "a", "b"];
//  let res = 0
//  arr.forEach((elem)=>{
//     if (elem === 'a') {
//         res++}
//  });
//  console.log(res);

/*Умножение всех чисел на 2.
Дан массив чисел [1, 2, 3, 4, 5]. Используй map, чтобы создать новый массив, где каждое число умножено на 2.*/

// const arr = [1, 2, 3, 4, 5];
// const newArr = arr.map ((elem)=>{
//     return elem * 2
// });
// console.log(newArr);

/*Изменение регистра букв.
У тебя есть массив строк ['hello', 'world', 'javascript']. Используй map, чтобы создать новый массив,
 где каждая строка будет записана заглавными буквами.*/
// const arr = ["hello", "world", "javascript"];
// const newArr = arr.map((elem)=>{
//     return elem.toUpperCase()
// });
// console.log(newArr);

/*Добавление символа к строкам.
Дан массив строк ['cat', 'dog', 'fish']. Используй map, чтобы создать новый массив,
 где к каждой строке добавляется символ !. Например, из 'cat' получится 'cat!'.*/
//  const arr = ["cat", "dog", "fish"];
//  const newArr = arr.map((elem)=>{
//     return elem + '!'
//  });
//  console.log(newArr);
/*
Отлично! Вот несколько задач посложнее, чтобы закрепить методы map и forEach.

Задачи на метод forEach:
Подсчёт суммы длины всех строк.
Дан массив строк ["apple", "banana", "cherry", "date"]. Используй forEach, 
чтобы найти общую длину всех строк в массиве.*/
// const arr = ["apple", "banana", "cherry", "date"];
// let res = 0;
// arr.forEach((elem)=>{
//     res = elem.length + res
// });
// console.log(res);
/*Фильтрация чисел.
Дан массив чисел [12, 5, 8, 130, 44]. Используй forEach, чтобы создать новый массив,
 содержащий только числа, которые больше 10.*/
//  const arr = [12, 5, 8, 130, 44];
//  const newArr =[];
//  arr.forEach((elem)=>{
//     if(elem >= 10) {
//         newArr.push(elem)
//     }
//  });
//  console.log(newArr);
/*Возведение чисел в квадрат и фильтрация.
Дан массив чисел [1, 4, 9, 16, 25]. Используй map, чтобы создать новый массив, в котором
 все числа возведены в квадрат. Затем отфильтруй массив, оставив только числа больше 100.*/

//  const arr = [1, 4, 9, 16, 25];
//  let newArr = arr.map((elem)=>{
//     return elem**2
//  });
//  let arr3 = [];
//  newArr.forEach((elem)=>{
//     if(elem > 100) {
//         arr3.push(elem);
//     }
//  })
//  console.log(arr3);

// const arr = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 35 },
// ];
// const newArr = arr.map((elem)=>{
//     return `${elem.name} is ${elem.age} years old`
// });
// console.log(newArr);

// const people = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 25 },
//   { name: "David", age: 30 },
//   { name: "Eve", age: 35 },
// ];
// const obj = {};
// people.forEach((elem)=>{
//     if (elem.age )
// });
/*Дан массив строк: ["hello", "world", "javascript", "is", "awesome"]. Используй forEach,
 чтобы подсчитать общее количество гласных (a, e, i, o, u) во всех строках массива.*/
// let arr = ["hello", "world", "javascript", "is", "awesome"];

// let count = 0;
// arr.forEach((elem) => {
//   for(let letter of elem) {
//     if (
//       letter === "a" ||
//       letter === "e" ||
//       letter === "i" ||
//       letter === "o" ||
//       letter === "u"
//     ) {
//       count++;
//     }
//   }
// });

// console.log(count);

// const names = ["Alice", "Bob", "Charlie"];
// const scores = [85, 92, 78];

// const newArr = names.map((name, i)=>{
//    return Object (`name: ${name}, score: ${scores[i]}`)
// });
// console.log(newArr);

/*Фильтрация чётных чисел:
Дан массив чисел [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Используй метод filter,
 чтобы создать новый массив, содержащий только чётные числа.*/

//  let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
//  let newArr = arr.filter((elem)=> {
//     if(elem % 2 === 0){
//       return elem
//     }
//  });
//  console.log(newArr);

/*Поиск числа больше 50:
Дан массив чисел [10, 25, 38, 45, 62, 70, 15]. Используй метод find,
 чтобы найти первое число, которое больше 50.*/
//  const arr = [10, 25, 38, 45, 62, 70, 15];
//  let newArr = arr.find((num)=>{
//   if (num > 50) {
//     return num
//   }
//  });
//  console.log(newArr);

/*Фильтрация строк по длине:
Дан массив строк ["apple", "banana", "cherry", "date", "fig"]. Используй метод filter,
 чтобы создать новый массив, содержащий только строки длиной больше 4 символов.*/
//  const arr = ["apple", "banana", "cherry", "date", "fig"];
//  let newArr = arr.filter((elem)=>{
//   if (elem.length > 4) {
//     return elem
//   }
//  });
//  console.log(newArr);

/*Поиск слова, начинающегося с определённой буквы:
Дан массив строк ["car", "bike", "bus", "train", "boat"]. Используй метод find,
 чтобы найти первое слово, которое начинается с буквы 'b'.*/
// const arr = ["car", "bike", "bus", "train", "boat"];
// let newArr = arr.find(word => word.startsWith('b'))
// console.log(newArr);

/*Фильтрация объектов по возрасту:
У тебя есть массив объектов, представляющих людей:

const people = [
    { name: "Alice", age: 25 },
    { name: "Bob", age: 30 },
    { name: "Charlie", age: 17 },
    { name: "David", age: 21 },
    { name: "Eve", age: 18 }
];
Используй метод filter, чтобы создать новый массив, содержащий только тех людей, которым больше 20 лет.*/

// const people = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 17 },
//   { name: "David", age: 21 },
//   { name: "Eve", age: 18 },
// ];
// let older20 = people.filter(person => person.age > 20);
// console.log(older20);

/*Поиск товара по цене:
У тебя есть массив объектов, представляющих товары:

const products = [
    { name: "Laptop", price: 1000 },
    { name: "Phone", price: 500 },
    { name: "Tablet", price: 750 },
    { name: "Monitor", price: 300 }
];
Используй метод find, чтобы найти первый товар, который стоит больше 600.*/

// const products = [
//   { name: "Laptop", price: 1000 },
//   { name: "Phone", price: 500 },
//   { name: "Tablet", price: 750 },
//   { name: "Monitor", price: 300 },
// ];

// let priceOver600 = products.find(product => product.price > 600);
// console.log(priceOver600);

/*У тебя есть массив объектов, представляющих заказы в магазине. Каждый объект
 содержит информацию о заказе, включая id, пользователя и сумму. Найди первый заказ,
  который был сделан пользователем с именем "Иван" и сумма которого превышает 1000.

const orders = [
  { id: 1, user: 'Алексей', amount: 500 },
  { id: 2, user: 'Иван', amount: 1500 },
  { id: 3, user: 'Мария', amount: 200 },
  { id: 4, user: 'Иван', amount: 800 },
];*/
// const orders = [
//   { id: 1, user: "Алексей", amount: 500 },
//   { id: 2, user: "Иван", amount: 1500 },
//   { id: 3, user: "Мария", amount: 200 },
//   { id: 4, user: "Иван", amount: 800 },
// ];

// let findOrder = orders.find(order=>order.user === 'Иван' && order.amount > 1000);
// console.log(findOrder);

/*У тебя есть массив объектов, представляющих события в календаре. Каждое событие имеет дата,
 время и название. Тебе нужно отфильтровать все события, которые происходят в текущем месяце
  и имеют название, содержащее слово "собрание".

const events = [
  { date: '2024-08-05', time: '10:00', title: 'Встреча по проекту' },
  { date: '2024-08-15', time: '14:00', title: 'Совещание с командой' },
  { date: '2024-09-10', time: '09:00', title: 'Открытие нового офиса' },
  { date: '2024-08-25', time: '11:00', title: 'Ежемесячное собрание' },
];
*/
// const events = [
//   { date: "2024-08-05", time: "10:00", title: "Встреча по проекту" },
//   { date: "2024-08-15", time: "14:00", title: "Совещание с командой" },
//   { date: "2024-09-10", time: "09:00", title: "Открытие нового офиса" },
//   { date: "2024-08-25", time: "11:00", title: "Ежемесячное собрание" },
// ];
// let eventsFilter = events.filter((event)=>{
//   if (event.date.includes('2024-08') && event.title.includes('собрание'))
//   return event
// });
// console.log(eventsFilter);

/*1. Поиск самого дорогого товара:
У тебя есть массив объектов, представляющих товары:


const products = [
    { name: "Laptop", price: 1000 },
    { name: "Phone", price: 500 },
    { name: "Tablet", price: 750 },
    { name: "Monitor", price: 300 },
    { name: "Desktop", price: 1500 }
];
Используй комбинацию методов map, filter, и find, чтобы найти самый дорогой товар,
 который стоит больше 700, и вернуть его имя.*/

// const products = [
//   { name: "Laptop", price: 1000 },
//   { name: "Phone", price: 500 },
//   { name: "Tablet", price: 750 },
//   { name: "Monitor", price: 300 },
//   { name: "Desktop", price: 1500 },
// ];
// const mostExpensive = products.filter((product) => {
//  if(product.price > 700)
//  return(product)

// })
// console.log(mostExpensive);

/*У тебя есть массив объектов, представляющих людей:

const people = [
    { name: "Alice", age: 25 },
    { name: "Bob", age: 30 },
    { name: "Charlie", age: 17 },
    { name: "David", age: 21 },
    { name: "Eve", age: 18 }
];
Используй комбинацию методов filter и reduce, чтобы найти сумму 
возрастов всех людей, которым 18 лет и больше.*/
// const people = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 17 },
//   { name: "David", age: 21 },
//   { name: "Eve", age: 18 },
// ];
// let ageFilter = people.filter(elem => elem.age > 18);
// let ageSumm = ageFilter.reduce((acc, elem)=>{
//   return acc + elem.age
// }, 0);
// console.log(ageSumm);

/*3. Создание строки из определённых слов:
Дан массив строк:

javascript
Копировать код
const words = ["tree", "house", "car", "bicycle", "apple", "phone"];
Используй filter и map, чтобы создать строку, содержащую только те слова, которые
 начинаются с буквы 'a' или 'b', при этом каждое слово должно быть записано
  заглавными буквами. Например, из массива выше должно получиться: "BICYCLE, APPLE, BICYCLE".*/

// const words = ["tree", "house", "car", "bicycle", "apple", "phone"];
// const filteredWords = words.filter(word => word.startsWith('a') || word.startsWith('b'));

// const toUpp = filteredWords.map (word => word.toUpperCase());
// console.log(toUpp);

/*4. Подсчёт уникальных значений в массиве:
Дан массив чисел:

javascript
Копировать код
const numbers = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 9, 9];
Используй forEach и объект для подсчёта, чтобы найти, сколько раз каждое число встречается в массиве.
 Результатом должен быть объект, где ключи — это числа, а значения — количество их появлений в массиве.
  Например: {1: 1, 2: 2, 3: 1, 4: 3, 5: 1, 6: 2, 7: 1, 8: 1, 9: 2}.*/

// const numbers = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 9, 9];
// let newObj = {};
// numbers.forEach((number)=>{
//   if(number.include newObj = newObj + `${number.index}: ${number.velue}`
// })
// console.log(newObj);

/*5. Сортировка массива объектов:
Дан массив объектов:

const students = [
    { name: "Alice", grade: 85 },
    { name: "Bob", grade: 92 },
    { name: "Charlie", grade: 78 },
    { name: "David", grade: 95 },
    { name: "Eve", grade: 88 }
];
Используй sort и map, чтобы отсортировать студентов по их оценкам в порядке убывания и создать
 новый массив строк, где каждый элемент — это имя студента и его оценка, например: "David: 95".*/

//  const students = [
//    { name: "Alice", grade: 85 },
//    { name: "Bob", grade: 92 },
//    { name: "Charlie", grade: 78 },
//    { name: "David", grade: 95 },
//    { name: "Eve", grade: 88 },
//  ];
// students.sort((studetnA, studentB)=>{
//     return studentB.grade - studetnA.grade
//  });
//   let studentsArr = students.map ((student)=> {
//   return `${student.name}: ${student.grade}.`
//  })
// console.log(studentsArr);

/*Сортировка студентов по алфавиту и создание строки: У тебя есть массив объектов, представляющих студентов:

javascript
Копировать код
const students = [
    { name: "Charlie", grade: 78 },
    { name: "Alice", grade: 85 },
    { name: "Eve", grade: 88 },
    { name: "Bob", grade: 92 },
    { name: "David", grade: 95 }
];
Используй методы sort и map, чтобы отсортировать студентов по именам в алфавитном порядке
 и создать строку, содержащую их имена, разделённые запятыми.*/

//  const students = [
//    { name: "Charlie", grade: 78 },
//    { name: "Alice", grade: 85 },
//    { name: "Eve", grade: 88 },
//    { name: "Bob", grade: 92 },
//    { name: "David", grade: 95 },
//  ];

// students.sort((a, b) => a.name.localeCompare(b.name))
// let names = students.map(student => student.name);
// let str = names.join(', ');
// console.log(str);

/*Экстра сложные задачи
Создание списка уникальных имён: Дан массив строк, представляющих имена:

javascript
Копировать код
const names = ["Alice", "Bob", "Charlie", "Alice", "Bob", "Eve", "David"];
Используй метод forEach и объект для подсчёта, чтобы создать массив, содержащий только уникальные имена,
 то есть каждое имя должно встречаться в итоговом массиве только один раз.*/

// const names = ["Alice", "Bob", "Charlie", "Alice", "Bob", "Eve", "David"];
// names.sort((a, b) => a.localeCompare(b));
// let newArr = [];
// names.forEach((name) => {
//   if (!newArr.includes(name)) {
//     newArr.push(name);
//   }
// });
// console.log(newArr);

/*Фильтрация и преобразование объектов: У тебя есть массив объектов, представляющих книги:

javascript
Копировать код
const books = [
    { title: "Book A", pages: 150 },
    { title: "Book B", pages: 200 },
    { title: "Book C", pages: 300 },
    { title: "Book D", pages: 90 }
];
Используй методы filter и map, чтобы создать новый массив объектов, где будут только
 те книги, у которых количество страниц больше 100, и в каждом объекте должно быть новое
  свойство summary, содержащее строку формата "Title: X, Pages: Y".*/

// const books = [
//   { title: "Book A", pages: 150 },
//   { title: "Book B", pages: 200 },
//   { title: "Book C", pages: 300 },
//   { title: "Book D", pages: 90 },
// ];
// let booksFiltered = books.filter((book)=>{
//   return book.pages >= 100;
// });
// let newBooks = booksFiltered.map((book) =>{
//   return book
// });
// console.log(newBooks);

/*3. Создание строки из имён авторов, отсортированных по длине:
У тебя есть массив строк, представляющих имена авторов:

javascript
Копировать код
const authors = ["Tolkien", "Rowling", "Lewis", "Orwell", "Austen", "Hemingway"];
Используй методы sort, map, и join, чтобы создать строку, содержащую имена авторов, отсортированные по
 длине в порядке возрастания, и разделённые запятыми.
*/
// const authors = [
//   "Tolkien",
//   "Rowling",
//   "Lewis",
//   "Orwell",
//   "Austen",
//   "Hemingway",
// ];
// authors.sort((a, b)=>{
//   return a.length - b.length
// })
// console.log(authors);
// let str = authors.join(', ')
// console.log(str);

/*4. Создание списка уникальных категорий товаров:
Дан массив объектов, представляющих товары с их названиями и категориями:

javascript
Копировать код
const items = [
    { name: "Laptop", category: "Electronics" },
    { name: "Phone", category: "Electronics" },
    { name: "Shirt", category: "Clothing" },
    { name: "Shoes", category: "Clothing" },
    { name: "Tablet", category: "Electronics" },
    { name: "Pants", category: "Clothing" }
];
Используй методы map, filter, и Set, чтобы создать массив уникальных категорий товаров.
*/

// const items = [
//   { name: "Laptop", category: "Electronics" },
//   { name: "Phone", category: "Electronics" },
//   { name: "Shirt", category: "Clothing" },
//   { name: "Shoes", category: "Clothing" },
//   { name: "Tablet", category: "Electronics" },
//   { name: "Pants", category: "Clothing" },
// ];

// let electronics = items.filter((item)=>{
//   return item.category === "Electronics";
// });
// let clothing = items.filter((item)=>{
//   return item.category === "Clothing";
// });
// console.log(clothing);

/*5. Группировка студентов по их оценкам:
Дан массив объектов, представляющих студентов и их оценки:

javascript
Копировать код
const students = [
    { name: "Alice", grade: "A" },
    { name: "Bob", grade: "B" },
    { name: "Charlie", grade: "A" },
    { name: "David", grade: "C" },
    { name: "Eve", grade: "B" }
];
Используй метод reduce, чтобы сгруппировать студентов по их оценкам.
 В результате должен получиться объект, где ключи — это оценки (например, "A", "B", "C"),
  а значения — массивы имён студентов с соответствующей оценкой.*/

// const students = [
//   { name: "Alice", grade: "A" },
//   { name: "Bob", grade: "B" },
//   { name: "Charlie", grade: "A" },
//   { name: "David", grade: "C" },
//   { name: "Eve", grade: "B" },
// ];
// let

// ============================================== деструктуризация =================================
/*Задача 1:
У тебя есть строка "кот, собака, птица". Используй split, чтобы разделить эту строку
 на отдельные слова и сохрани их в массив.
*/
// let str = "кот, собака, птица";
// let arr = str.split(', ');
// console.log(arr);
/*Задача 2:
У тебя есть строка "123-456-789". Раздели эту строку на части, используя дефис (-) как разделитель.
*/
// let str = "123-456-789";
// let arr = str.split ('-');
// console.log(arr);

/*Задача 3:
Есть строка "hello world". Раздели эту строку на отдельные символы.
*/
// let str = "hello world";
// let arr = str.split('');
// console.log(arr);

/*Задача 4:
Дана строка "яблоко, апельсин, банан, виноград". Раздели строку на три части.
 */
// let str = "яблоко, апельсин, банан, виноград";
// let arr = str.split(',', 3);
// console.log(arr);
/*Задача 5:
У тебя есть строка: "Кот:Мяу; Собака:Гав; Птица:Чирик". Нужно разделить эту строку на массив,
 в котором каждая часть будет содержать отдельно животное и его звук, например,
  ["Кот", "Мяу"]. Используй метод split дважды, чтобы достичь этой цели.*/

// let str = "Кот:Мяу; Собака:Гав; Птица:Чирик";
// let arr = str.split('; ');
// console.log(arr);
// let arr2 = arr.map((elem)=>{
//   return elem.split(':')
// });
// console.log(arr2);

// let [firstName, surname] = "Ilya Kantor".split(" ");
// console.log(firstName);
// let user = {};
// let [surname, name] = "Гордеев Евгений".split(' ');
// user.name = name;
// user.surname = surname;
// console.log(user);

/*Задача 1: Извлечение данных из объекта
Условие: У тебя есть объект person, содержащий информацию о человеке.
 Используя деструктурирующее присваивание, извлеки значения свойств name и age в отдельные переменные.

javascript
Копировать код
const person = {
  name: "Анна",
  age: 28,
  city: "Москва",
  occupation: "Инженер"
};

// Твой код здесь
Ожидаемый результат:

javascript
Копировать код
console.log(name); // "Анна"
console.log(age);  // 28
*/
// const person = {
//   name: "Анна",
//   age: 28,
//   city: "Москва",
//   occupation: "Инженер",
// };
// let{age, name} = person;

/*Задача 6:
У тебя есть строка: "Имя: Джон, Возраст: 30; Имя: Анна, Возраст: 25;
 Имя: Петр, Возраст: 40". Нужно создать массив объектов, где каждый объект 
 будет иметь свойства Имя и Возраст, например, { Имя: "Джон", Возраст: 30 }.*/
// let str =
//   "Имя: Джон, Возраст: 30; Имя: Анна, Возраст: 25; Имя: Петр, Возраст: 40";
// let arr = str.split("; ");

// let newObj = arr.map((elem) => {
//   let personArr = elem.split(", ");
//   let personObj = {};

//   personArr.forEach((part) => {
//     let [key, value] = part.split(": ");
//     personObj[key] = value;
//   });

//   return personObj;
// });

// console.log(newObj);

/*Задача 7:
У тебя есть строка: "Книга: Гарри Поттер, Автор: Дж.К. Роулинг; Книга: Война и мир, Автор: Лев Толстой; Книга: 1984, Автор: Джордж Оруэлл".
 Тебе нужно создать массив объектов, где каждый объект будет содержать информацию о книге и её авторе, например, { Книга: "Гарри Поттер", Автор: "Дж.К. Роулинг" }.*/

// let str = "Книга: Гарри Поттер, Автор: Дж.К. Роулинг; Книга: Война и мир, Автор: Лев Толстой; Книга: 1984, Автор: Джордж Оруэлл";
// let arr = str.split('; ');
// console.log(arr);
// let resObj = arr.map((product)=>{
//   let bookAutor = product.split(', ')
//   let obj= {};
//   bookAutor.forEach((part)=>{
//     let [key, book] = part.split(': ');
//     obj[key] = book
//   });
//   return obj
// });
// console.log(resObj);

/*Задача 1:
У тебя есть массив: ["клавиатура", "мышь", "монитор"]. Используй деструктуризацию, чтобы присвоить значения переменным устройство1, устройство2, и устройство3.*/
// let arr = ["клавиатура", "мышь", "монитор"];
// let [divice1, divice2, divice3] = arr;

/*Задача 2:
Есть объект: { бренд: "Apple", модель: "iPhone", год: 2023 }. Используй деструктуризацию, чтобы извлечь значения бренд, модель, и год и присвоить их соответствующим переменным.*/
// let obj = { бренд: "Apple", модель: "iPhone", год: 2023 };
// let {бренд, модель, год} = obj;

/*Задача 3:
У тебя есть массив: ["яблоко", "банан", "вишня", "апельсин", "манго"]. Используй деструктурирующее присваивание, чтобы:

Пропустить первый элемент.
Присвоить второй элемент переменной фрукт1.
Остальные элементы сохранить в массив остальныеФрукты.
*/
// let arr = ["яблоко", "банан", "вишня", "апельсин", "манго"];
// let [, фрукт1, ... остальныеФрукты] = arr;

/*Задача 4:
Дан объект:

{
  имя: "Анна",
  возраст: 28,
  адрес: {
    улица: "Ленина",
    дом: 10,
    квартира: 5
  }
}
Используй деструктурирующее присваивание, чтобы извлечь:

имя и возраст как отдельные переменные.
Вложенные улица, дом, и квартира также как отдельные переменные.
Попробуй решить задачи, и скажи, что у тебя получилось!*/

// let obj = {
//   имя: "Анна",
//   возраст: 28,
//   адрес: {
//     улица: "Ленина",
//     дом: 10,
//     квартира: 5,
//   },
// };
// let {имя, возраст, адрес: {улица, дом, квартира}} = obj;
// console.log(квартира);

/*Задача 5:
У тебя есть массив объектов, представляющих книги:

javascript
Копировать код
let книги = [
  { название: "1984", автор: "Джордж Оруэлл", год: 1949 },
  { название: "Мастер и Маргарита", автор: "Михаил Булгаков", год: 1967 },
  { название: "Преступление и наказание", автор: "Фёдор Достоевский", год: 1866 }
];
Используй деструктурирующее присваивание, чтобы:

Извлечь название и автора первой книги в переменные название1 и автор1.
Оставшиеся книги сохранить в массив остальныеКниги.*/

// let книги = [
//   { название: "1984", автор: "Джордж Оруэлл", год: 1949 },
//   { название: "Мастер и Маргарита", автор: "Михаил Булгаков", год: 1967 },
//   { название: "Преступление и наказание",автор: "Фёдор Достоевский", год: 1866,
//   },
// ];
// let [{название, автор}, ... остальныеКниги] = книги;
// console.log(остальныеКниги);

/*Задача 6:
Дан объект с информацией о студенте:

javascript
Копировать код
let студент = {
  имя: "Иван",
  возраст: 21,
  оценки: {
    математика: 5,
    физика: 4,
    литература: 5
  },
  контакты: {
    телефон: "+123456789",
    email: "ivan@example.com"
  }
};
Используй деструктурирующее присваивание, чтобы:

Извлечь имя, возраст и телефон в отдельные переменные.
Оставшиеся данные (оценки и email) сохранить в отдельный объект допИнформация.
Попробуй решить задачи и сообщи, как у тебя получилось!*/

// let студент = {
//   имя: "Иван",
//   возраст: 21,
//   оценки: {
//     математика: 5,
//     физика: 4,
//     литература: 5,
//   },
//   контакты: {
//     телефон: "+123456789",
//     email: "ivan@example.com",
//   },
// };
// let {имя, возраст, контакты:{телефон}, ...допИнформация} = студент;

/*Задача 7:
У тебя есть вложенный объект, представляющий настройки пользователя:

javascript
Копировать код
let настройки = {
  интерфейс: {
    тема: "темная",
    язык: "русский"
  },
  уведомления: {
    email: true,
    sms: false,
    push: true
  },
  учетнаяЗапись: {
    логин: "user123",
    пароль: "securepassword"
  }
};
Твоя задача:

Извлечь тему и язык в отдельные переменные тема и язык.
Извлечь все уведомления в объект уведомления.
Извлечь логин в переменную логин.
Сохранить все оставшиеся данные в объект другиеНастройки.
*/

// let настройки = {
//   интерфейс: {
//     тема: "темная",
//     язык: "русский"
//   },
//   уведомления: {
//     email: true,
//     sms: false,
//     push: true
//   },
//   учетнаяЗапись: {
//     логин: "user123",
//     пароль: "securepassword"
//   }
// };
// let{интерфейс: {тема, язык}, уведомления, учетнаяЗапись:{логин}, ... другиеНастройки} = настройки;

// console.log(другиеНастройки);

/*Задача 8:
Дан массив, содержащий информацию о транзакциях:

javascript
Копировать код
let транзакции = [
  { id: 1, сумма: 100, тип: "пополнение", статус: "успешно" },
  { id: 2, сумма: 50, тип: "снятие", статус: "ошибка" },
  { id: 3, сумма: 75, тип: "пополнение", статус: "успешно" },
  { id: 4, сумма: 20, тип: "снятие", статус: "успешно" },
];
Твоя задача:

Извлечь первую транзакцию в отдельные переменные id1, сумма1, тип1, и статус1.
Сохранить все оставшиеся транзакции в массив остальныеТранзакции.
Из массива остальныеТранзакции извлечь суммы всех транзакций, которые имеют статус "успешно", и сохранить их в массив успешныеСуммы.
*/
// let транзакции = [
//   { id: 1, сумма: 100, тип: "пополнение", статус: "успешно" },
//   { id: 2, сумма: 50, тип: "снятие", статус: "ошибка" },
//   { id: 3, сумма: 75, тип: "пополнение", статус: "успешно" },
//   { id: 4, сумма: 20, тип: "снятие", статус: "успешно" },
// ];

// let [{id: id1, сумма: сумма1, тип: тип1, статус : статус1}, ... остальныеТранзакции] = транзакции;

/*Задача 9:
У тебя есть объект, представляющий данные о пользователе и его друзьях:

javascript
Копировать код
let пользователь = {
  имя: "Алексей",
  возраст: 34,
  друзья: [
    { имя: "Максим", возраст: 30 },
    { имя: "Ирина", возраст: 25 },
    { имя: "Ольга", возраст: 29 }
  ]
};
Твоя задача:

Извлечь имя и возраст пользователя в отдельные переменные.
Извлечь данные о первом друге в отдельные переменные друг1Имя и друг1Возраст.
Сохранить данные о других друзьях в массив остальныеДрузья.*/ // let пользователь = {
//   имя: "Алексей",
//   возраст: 34,
//   друзья: [
//     { имя: "Максим", возраст: 30 },
//     { имя: "Ирина", возраст: 25 },
//     { имя: "Ольга", возраст: 29 },
//   ],
// };
// let {имя, возраст, друзья:[{имя:друг1Имя, возраст:друг1Возраст}, ... остальныеДрузья]} = пользователь;

// console.log(остальныеДрузья);
/*Задача 10:
Дан массив, представляющий заказы в интернет-магазине:

javascript
Копировать код
let заказы = [
  { id: 1, продукт: "Телефон", количество: 2, цена: 500 },
  { id: 2, продукт: "Ноутбук", количество: 1, цена: 1200 },
  { id: 3, продукт: "Планшет", количество: 3, цена: 300 },
  { id: 4, продукт: "Часы", количество: 5, цена: 200 }
];
Твоя задача:

Извлечь первый заказ в отдельные переменные первыйЗаказПродукт, первыйЗаказКоличество, и первыйЗаказЦена.
Сохранить остальные заказы в массив остальныеЗаказы.
Используя map, создать массив, содержащий общую стоимость (цена * количество) каждого заказа из массива
 остальныеЗаказы, и сохранить его в переменную общаяСтоимостьЗаказов.*/
// let заказы = [
//   { id: 1, продукт: "Телефон", количество: 2, цена: 500 },
//   { id: 2, продукт: "Ноутбук", количество: 1, цена: 1200 },
//   { id: 3, продукт: "Планшет", количество: 3, цена: 300 },
//   { id: 4, продукт: "Часы", количество: 5, цена: 200 },
// ];
// let [{продукт:первыйЗаказПродукт, количество:первыйЗаказКоличество, цена:первыйЗаказЦена},...остальныеЗаказы] = заказы;
// console.log(остальныеЗаказы);
// общаяСтоимостьЗаказов = остальныеЗаказы.map((elem)=>{
//   return elem.цена * elem.количество
// });
// console.log(общаяСтоимостьЗаказов);

/*адача 11:
У тебя есть объект, представляющий результаты экзаменов студентов:

javascript
Копировать код
let результаты = {
  студенты: [
    { имя: "Ольга", оценки: { математика: 90, физика: 85, химия: 78 } },
    { имя: "Дмитрий", оценки: { математика: 88, физика: 92, химия: 95 } },
    { имя: "Екатерина", оценки: { математика: 85, физика: 80, химия: 82 } }
  ],
  предметы: ["математика", "физика", "химия"]
};
Твоя задача:

Извлечь имена всех студентов в массив именаСтудентов.
Извлечь оценки первого студента по предметам в отдельные переменные математикаОльга, физикаОльга, и химияОльга.
Сохранить оценки всех остальных студентов в массив остальныеОценки.*/
// let результаты = {
//   студенты: [
//     { имя: "Ольга", оценки: { математика: 90, физика: 85, химия: 78 } },
//     { имя: "Дмитрий", оценки: { математика: 88, физика: 92, химия: 95 } },
//     { имя: "Екатерина", оценки: { математика: 85, физика: 80, химия: 82 } },
//   ],
//   предметы: ["математика", "физика", "химия"],
// };
// let именаСтудентов = результаты.студенты.map(element => {
//   return element.имя
// });
// let {студенты:[{оценки:{математика:математикаОльга, физика:физикаОльга, химия:химияОльга}}, ... остальныеОценки]} = результаты;
// console.log(остальныеОценки);

/*Задача 12:
Дан массив, представляющий покупки в магазине:

javascript
Копировать код
let покупки = [
  { id: 1, продукт: "Молоко", количество: 2, цена: 50 },
  { id: 2, продукт: "Хлеб", количество: 1, цена: 30 },
  { id: 3, продукт: "Яблоки", количество: 5, цена: 10 },
  { id: 4, продукт: "Сыр", количество: 1, цена: 200 }
];
Твоя задача:

Извлечь второй элемент массива в отдельные переменные второйПродукт, второеКоличество, и втораяЦена.
Сохранить все оставшиеся покупки в массив остальныеПокупки.
Используя reduce, посчитать общую стоимость всех покупок и сохранить это значение в переменную общаяСтоимость.*/
// let покупки = [
//   { id: 1, продукт: "Молоко", количество: 2, цена: 50 },
//   { id: 2, продукт: "Хлеб", количество: 1, цена: 30 },
//   { id: 3, продукт: "Яблоки", количество: 5, цена: 10 },
//   { id: 4, продукт: "Сыр", количество: 1, цена: 200 },
// ];

// let [,{продукт:второйПродукт, количество:второеКоличество, цена:втораяЦена}, ... остальныеПокупки] = покупки;
// let общаяСтоимость = покупки.reduce((accum, elem)=>{
//   return elem.количество * elem.цена + accum
// },0);

/*Задача 13:
У тебя есть объект, представляющий информацию о фильмах и актерах:

javascript
Копировать код
let кино = {
  жанры: ["драма", "комедия", "триллер"],
  фильмы: [
    { название: "Фильм1", режиссер: "Иванов", актеры: ["Актер1", "Актер2", "Актер3"] },
    { название: "Фильм2", режиссер: "Петров", актеры: ["Актер4", "Актер5", "Актер6"] },
    { название: "Фильм3", режиссер: "Сидоров", актеры: ["Актер7", "Актер8", "Актер9"] }
  ]
};
Твоя задача:

Извлечь первый жанр в переменную первыйЖанр.
Извлечь название и режиссера второго фильма в переменные название2 и режиссер2.
Извлечь всех актеров третьего фильма в массив актерыТретийФильм.
Сохранить остальные фильмы в массив остальныеФильмы.*/
// let кино = {
//   жанры: ["драма", "комедия", "триллер"],
//   фильмы: [
//     {
//       название: "Фильм1",
//       режиссер: "Иванов",
//       актеры: ["Актер1", "Актер2", "Актер3"],
//     },
//     {
//       название: "Фильм2",
//       режиссер: "Петров",
//       актеры: ["Актер4", "Актер5", "Актер6"],
//     },
//     {
//       название: "Фильм3",
//       режиссер: "Сидоров",
//       актеры: ["Актер7", "Актер8", "Актер9"],
//     },
//   ],
// };
// let {
//   жанры: [первыйЖанр],
//   фильмы: [, { название: название2, режиссер: режиссер2 }],
//   фильмы: [, , { актеры: актерыТретийФильм },
//   ...остальныеФильмы]
// } = кино;
// console.log(первыйЖанр);

// function sumInput() {
//   let arr = [];
//   let num = Number(prompt ());
//   if(num == Number) {
//     arr.push(num);
// } else {
//   return arr.reduce((accum, elem)=>{
//     return elem + accum
//   },0)
// };
// }
// console.log(sumInput());
/*Задача 1 (простая):
Дан массив чисел [5, 10, 15, 20]. Используй метод map, чтобы создать новый массив, где каждому числу прибавляется 3.
 Какой получится новый массив?*/

// let arr = [5, 10, 15, 20];
// let newArr = arr.map(elem=> elem + 3);
// console.log(newArr);

/*Задача 2 (посложнее):
У тебя есть массив строк ['hello', 'world']. Используй метод map, чтобы создать массив, где каждое слово начинается с заглавной буквы. Какой будет результат?*/
// let arr = ["hello", "world"];
// let newArr = arr.map((elem)=>{
//   return elem = elem[0].toUpperCase() + elem.slice(1)
// });
// console.log(newArr);

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 30 },
  { name: 'Charlie', age: 35 }
];
Используй метод map, чтобы создать массив, содержащий только имена пользователей. Какой будет результат?

Напиши свои решения, а я помогу проверить их и дам советы!*/

// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
//   { name: "Charlie", age: 35 },
// ];
// let newArr = users.map(elem => elem.name);
// console.log(newArr);

/*Задача 1 (простая):
У тебя есть массив чисел [10, 15, 20, 25, 30]. Используй метод filter, чтобы создать новый массив, содержащий только числа, которые больше 20.*/
// let arr = [10, 15, 20, 25, 30];
// let newArr = arr.filter(elem => elem >= 20);
// console.log(newArr);

/*Задача 2 (посложнее):
Дан массив строк ['apple', 'banana', 'cherry', 'date']. Используй метод filter, чтобы создать массив, содержащий только те строки, длина которых больше 5 символов.*/
// let aerr = ["apple", "banana", "cherry", "date"];
// let newArr = arr.filter(elem => elem.length >= 5);
// console.log(newArr);

/*Задача 3 (самая сложная):
У тебя есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод filter, чтобы создать массив, содержащий только тех пользователей, чей возраст больше 20 лет.

Напиши свои решения, и мы их обсудим!*/
// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 18 },
//   { name: "Charlie", age: 35 },
// ];
// let newArr = users.filter(elem=>elem.age > 20);
// console.log(newArr);

/*Задача 1 (простая):
У тебя есть массив чисел [5, 12, 8, 130, 44]. Используй метод find, чтобы найти первое число, которое больше 10.*/

// let arr = [5, 12, 8, 130, 44];
// let num = arr.find(elem=>elem > 10);
// console.log(num);

/*Задача 2 (посложнее):
Дан массив строк ['cat', 'dog', 'elephant', 'giraffe']. Используй метод find, чтобы найти первое слово, длина которого больше 4 символов.*/

// let arr = ["cat", "dog", "elephant", "giraffe"];

// let word = arr.find(elem=>elem.length >4);
// console.log(word);

/*Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод find, чтобы найти первого пользователя, чей возраст больше 30 лет.*/

// const users = [
//   { name: 'Alice', age: 25 },
//   { name: 'Bob', age: 18 },
//   { name: 'Charlie', age: 35 }
// ];
// let user = users.find(elem=>elem.age>30);
// console.log(user);

/*Задача 1 (простая):
Напиши конструкцию switch, которая будет проверять переменную day и выводить день недели по-английски.
 Например, если day = 1, то выводить "Monday", если day = 2 — "Tuesday", и так далее до "Sunday".*/

// let day = 5;
// switch (day) {
//   case 1:
//     console.log('monday');
//     break;
//   case 2:
//     console.log('tuesday');
//     break;
//   case 3:
//     console.log('wednesday');
//     break;
//   case 4:
//     console.log('thusday');
//     break;
//   case 5:
//     console.log('friday');
//     break;
//   case 6:
//     console.log('saturday');
//     break;
//   case 7:
//     console.log('sunday');
//     break;
//   };

/*Задача 2 (посложнее):
Напиши конструкцию switch, которая будет проверять переменную color и выводить "Stop"
 для красного цвета, "Ready" для желтого и "Go" для зелёного. Если цвет другой, пусть выводит "Unknown color".*/
//     let color = 'red';
//     switch (color) {
//       case 'red':
//         console.log('stop');
//         break;
//       case 'yellow':
//         console.log('ready');
//         break;
//       case 'green':
//         console.log('go');
//         break;
// }
/*Задача 3 (самая сложная):
Представь, что у тебя есть переменная score, которая хранит количество набранных баллов.
Напиши конструкцию switch, которая определяет оценки в зависимости от диапазона: от 90 и выше — "A", от 80 до 89 — "B", от 70 до 79 — "C", от 60 до 69 — "D", ниже 60 — "F".*/

// let score = 95;
//  switch (true) {
//   case score >= 90:
//     console.log('A');
//     break;
//   case score >= 80 :
//     console.log('B');
//     break;
//   case score >= 70 :
//     console.log('C');
//     break;
//   case score >= 60 :
//     console.log('D');
//     break;
//   default:
//     console.log('F');

// }

/*Задача 1 (простая):
Дан массив чисел [2, 4, 6, 8, 10]. Используй метод forEach, чтобы вывести каждое число на экран.*/

// let arr = [2, 4, 6, 8, 10];
// arr.forEach(elem=>console.log(elem))

/*Задача 2 (посложнее):
Дан массив строк ['apple', 'banana', 'cherry']. Используй forEach, чтобы вывести длину каждой строки.*/
// let arr = ["apple", "banana", "cherry"];
// arr.forEach(elem=>console.log(elem.length))

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод forEach, чтобы для каждого пользователя вывести строку в формате "Имя: Alice, Возраст: 25".*/
// const users = [
//   { name: 'Alice', age: 25 },
//   { name: 'Bob', age: 18 },
//   { name: 'Charlie', age: 35 }
// ];
// users.forEach(elem => console.log(`Имя: ${elem.name}, Возраст: ${elem.age}`));

/*Задача 1 (простая):
Дан массив чисел [5, 7, 8, 10, 11]. Используй метод some, чтобы проверить, есть ли в массиве хотя бы одно четное число.*/
// let arr = [5, 7, 8, 10, 11];
// let isEven = arr.some(elem => elem%2===0);
// console.log(isEven);

/*Задача 2 (посложнее):
Дан массив строк ['cat', 'dog', 'elephant']. Используй some, чтобы проверить, есть ли в массиве хотя бы одно слово длиной больше 5 символов.*/
// let arr = ["cat", "dog", "elephant"];
// let moreThan5 = arr.some(elem => elem.length > 5);
// console.log(moreThan5);

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод some, чтобы проверить, есть ли в массиве пользователи младше 20 лет.
*/
// const users = [
//   { name: 'Alice', age: 25 },
//   { name: 'Bob', age: 18 },
//   { name: 'Charlie', age: 35 }
// ];

// let youngerThan20 = users.some(user => user.age < 20);
// console.log(youngerThan20);

// function testCase(a) {
//   var x;
//   switch (a) {
//     case 1:
//       x = 'Один';
//       break;
//     case 2:
//       x = 'Два';
//       break;
//     case 3:
//       x = 'Три';
//       break;
//     case 4:
//       x = 'Четыре';
//       break;
//     case 5:
//       x = 'Пять';
//       break;
//     case 6:
//       x = 'Шесть';
//       break;
//     case 7:
//       x = 'Семь';
//       break;
//     case 8:
//       x = 'Восемь';
//       break;
//     case 9:
//       x = 'Девять';
//       break;
//     case 0:
//       x = 'Ноль';
//       break;
//   }
//   return x;
// }
// console.log(testCase(8));

/*Задача 1: Проверка на наличие уникальных свойств
У тебя есть массив объектов, представляющих товары в магазине. Каждый объект содержит информацию о товаре:
 его название, цену и доступность на складе. Используй метод some, чтобы проверить,
  есть ли в массиве товары с уникальным свойством (например, товары дороже 100 долларов, которые в наличии на складе).*/

//   const products = [
//   { name: 'Laptop', price: 1500, inStock: true },
//   { name: 'Phone', price: 800, inStock: false },
//   { name: 'Tablet', price: 300, inStock: true },
//   { name: 'Headphones', price: 50, inStock: true }
// ];

// // Задача: Проверь, есть ли в массиве хотя бы один товар дороже 100 долларов и в наличии на складе.
// let productInStock = products.some(product => product.price > 100 && product.inStock === true);
// console.log(productInStock);

/*Задача 2: Проверка на наличие сложных условий
Дан массив строк, представляющих списки задач. Каждая задача может содержать подстроки "important" и "urgent".
 Используй метод some, чтобы проверить, есть ли хотя бы одна задача, которая является и важной, и срочной.*/

//  const tasks = [
//   'Finish report important',
//   'Call John urgent',
//   'Buy groceries',
//   'Schedule meeting important urgent'
// ];

// // Задача: Проверь, есть ли в массиве хотя бы одна задача, которая является и важной, и срочной.
// let importantTask = tasks.some(task => task.includes('important') && task.includes('urgent'));
// console.log(importantTask);

/*Задача 3: Проверка условий в вложенных массивах
У тебя есть массив пользователей, где каждый пользователь имеет массив друзей. 
Используй метод some, чтобы проверить, есть ли хотя бы один пользователь, у которого в друзьях есть человек старше 30 лет.*/

// const users = [
//   { name: 'Alice', friends: [{ name: 'John', age: 25 }, { name: 'Mike', age: 32 }] },
//   { name: 'Bob', friends: [{ name: 'Sam', age: 22 }] },
//   { name: 'Charlie', friends: [{ name: 'Anna', age: 28 }, { name: 'Jim', age: 31 }] }
// ];

// // Задача: Проверь, есть ли хотя бы один пользователь, у которого в друзьях есть человек старше 30 лет.

// let older30 = users.some((user) => {
//   return user.friends.some((element) => {
//    return element.age > 30

// });
// });
// console.log(older30);

/*Задача 1 (простая):
Дан массив чисел [4, 8, 12, 16]. Используй метод every, чтобы проверить, все ли числа в массиве делятся на 4.*/

// let arr = [4, 8, 12, 16];
// let allDivision4 = arr.every(num=> num%4 === 0);
// console.log(allDivision4);

/*Задача 2 (посложнее):
Дан массив строк ['tree', 'bush', 'flower']. Используй метод every, чтобы проверить, все ли строки в массиве имеют длину больше 3 символов.*/
// let arr = ["tree", "bush", "flower"];
// let longerThan3 = arr.every(elem => elem.length > 3);
// console.log(longerThan3);

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод every, чтобы проверить, все ли пользователи старше 20 лет.

Пиши свои решения, и мы их обсудим!*/

// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 18 },
//   { name: "Charlie", age: 35 },
// ];
// let olderThan20 = users.every(user => user.age > 20);
// console.log(olderThan20);

/*Задача 1 (простая):
Дан массив чисел [1, 3, 7, 10, 14]. Используй метод findIndex, чтобы найти индекс первого числа, которое больше 5.*/
// let arr = [1, 3, 7, 10, 14];
// let moreThen5 =  arr.findIndex(num => num > 5);
// console.log(moreThen5);

/*Задача 2 (посложнее):
Дан массив строк ['apple', 'banana', 'cherry', 'date']. Используй метод findIndex, чтобы найти индекс первого слова, которое начинается с буквы 'd'.*/

// let arr = ["apple", "banana", "cherry", "date"];
// let startD = arr.findIndex(word => word.startsWith('d'));
// console.log(startD);

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 }
];
Используй метод findIndex, чтобы найти индекс первого пользователя, чей возраст меньше 30 лет.*/

// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 18 },
//   { name: "Charlie", age: 35 },
// ];
// let lessThan30 = users.findIndex(user => user.age < 30);
// console.log(lessThan30);

/*Задача 1 (простая):
Даны два массива чисел [1, 2, 3] и [4, 5, 6]. Используй метод concat, чтобы объединить эти массивы в один.*/
// let arr1 = [1, 2, 3];
// let arr2 = [4, 5, 6];
// let arr3 = arr1.concat(arr2);
// console.log(arr3);

/*Задача 2 (посложнее):
Даны три массива строк ['apple', 'banana'], ['cherry', 'date'] и ['fig', 'grape']. Объедини их все в один массив с помощью метода concat.*/
// let arr1 = ['apple', 'banana'];
// let arr2 = ['cherry', 'date']
// let arr3 = ['fig', 'grape']
// let arr4 = arr1.concat(arr2, arr3);
// console.log(arr4);

// function testFactorial(a) {
//   var x = 1;
//   let i = 1;
//   while (i<=a) {
//     x = i * x;
//     i++
//   };
//   return x
// }

// function testWhile(a) {
//   let x = 0;
//   let i = 1;
//   while(i <= a) {
//     if(i % 2 === 0) {
//       x = x + i
//     };
//     i++;
//   }
//   return x;
// };

/*Задача 3 (самая сложная):
Есть массив объектов arr1:

javascript
Копировать код
const arr1 = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 }
];
И массив объектов arr2:

javascript
Копировать код
const arr2 = [
  { name: 'Charlie', age: 35 },
  { name: 'David', age: 22 }
];
Объедини эти два массива в один с помощью метода concat, а затем добавь еще один объект { name: 'Eve', age: 28 } к результату.*/

// const arr1 = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 18 },
// ];
// let arr2 = arr1.concat();

// arr2.push({ name: "Eve", age: 28 });
// console.log(arr1);
// console.log(arr2);

// const arr2 = [
//   { name: "Charlie", age: 35 },
//   { name: "David", age: 22 },
// ];
// let arr3 = arr1.concat(arr2);
// arr3.push({ name: "Eve", age: 28 });
// console.log(arr1);

/*Задача 1 (простая):
Дан массив чисел [10, 20, 30, 40, 50]. Используй метод slice, чтобы получить новый массив, содержащий элементы с индексами от 1 до 3.*/
// let arr = [10, 20, 30, 40, 50];
// let newArr = arr.slice(1, 3);
// console.log(newArr);

/* Задача 2 (посложнее):
Дан массив строк ['apple', 'banana', 'cherry', 'date', 'fig']. Используй метод slice, чтобы получить новый массив, содержащий последние два элемента массива.*/

// let a=rr = ["apple", "banana", "cherry", "date", "fig"];
// let newArr = arr.slice(-2);
// console.log(newArr);

/*Задача 3 (самая сложная):
Есть массив объектов:

javascript
Копировать код
const users = [
  { name: 'Alice', age: 25 },
  { name: 'Bob', age: 18 },
  { name: 'Charlie', age: 35 },
  { name: 'David', age: 22 },
  { name: 'Eve', age: 28 }
];
Используй метод slice, чтобы получить новый массив, содержащий объекты пользователей, начиная с второго и заканчивая четвёртым пользователем (включительно).*/
// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 18 },
//   { name: "Charlie", age: 35 },
//   { name: "David", age: 22 },
//   { name: "Eve", age: 28 },
// ];
// let usersSlice = users.slice(1,4);
// console.log(usersSlice);

/*Задача 1 (простая):
Дан массив чисел [1, 2, 3, 4, 5]. Используй метод join, чтобы объединить числа в строку через пробел.*/

// let arr = [1, 2, 3, 4, 5];
// let str = arr.join(' - ');
// console.log(str);

/*Задача 2 (посложнее):
Дан массив строк ['a', 'b', 'c', 'd']. Используй метод join, чтобы объединить элементы в строку, разделяя их символом |.*/
// let arr = ["a", "b", "c", "d"];
// let str = arr.join(' | ');
// console.log(str);

/*Задача 3 (самая сложная):
Есть массив объектов, каждый объект — это пользователь с именем. Тебе нужно создать строку, содержащую только имена пользователей, разделённые запятой.

javascript
Копировать код*/
// const users = [
//   { name: 'Alice' },
//   { name: 'Bob' },
//   { name: 'Charlie' },
//   { name: 'David' }
// ];

// let newArr = [];
// let strUsers = users.forEach(user => newArr.push(user.name));
// let str = newArr.join(', ')
// console.log(str);

/*Задача 1 (простая):
Дан массив чисел [10, 20, 30, 40, 50]. Используй метод includes, чтобы проверить, есть ли в массиве число 30.*/
// let arr = [10, 20, 30, 40, 50];
// let isIncludes = arr.includes(30);
// console.log(isIncludes);

/*Задача 2 (посложнее):
Дан массив строк ['cat', 'dog', 'elephant']. Используй метод includes, чтобы проверить, есть ли в массиве слово "lion".*/
// let arr = ['cat', 'dog', 'elephant'];
// let isIncludes = arr.includes('lion');
// console.log(isIncludes);

/*спользуй метод map для получения массива имён пользователей, а затем используй includes, чтобы проверить, есть ли в этом массиве имя "Charlie".*/
// const users = [{ name: "Alice" }, { name: "Bob" }, { name: "Charlie" }];
// let isIncludes = users.map(user => user.name).includes("Charlie");
// console.log(isIncludes);

/*Используй метод map, чтобы создать массив названий книг, а затем используй метод includes, чтобы проверить, есть ли в массиве книга с названием "1984".*/
// const books = [
//   { title: "To Kill a Mockingbird", author: "Harper Lee" },
//   { title: "1984", author: "George Orwell" },
//   { title: "Moby Dick", author: "Herman Melville" },
// ];
// let isIncludes = books.map(book => book.title).includes('1984');
// console.log(isIncludes);

// let findBook = books.find(book => book.title === "1984");
// console.log(findBook);

/*Создай массив имён студентов с помощью метода map, а затем проверь с помощью метода includes, есть ли студент с именем "Brian".*/
// const students = [
//   { name: "Anna", age: 22 },
//   { name: "Brian", age: 19 },
//   { name: "Chris", age: 24 },
// ];
// let isIncludes = students.map((student) => student.name).includes("Brian");
// console.log(isIncludes);

/*Создай массив с названиями товаров и используй метод includes, чтобы проверить, есть ли товар с названием "Smartphone" в списке.*/
// const products = [
//   { productName: "Laptop", price: 1500 },
//   { productName: "Smartphone", price: 800 },
//   { productName: "Tablet", price: 300 },
// ];
// let isIncludes = products
//   .map((item) => item.productName)
//   .includes("Smartphone");
//   console.log(isIncludes);

/*Задача 1 (простая):
Дан массив [[1, 2], [3, 4], [5, 6]]. Используй метод flat, чтобы сделать его одномерным.*/
// let arr = [
//   [1, 2],
//   [3, 4],
//   [5, 6],
// ];
// let newArr = arr.flat();
// console.log(newArr);

/*Задача 2 (посложнее):
Дан массив [1, [2, [3, [4, 5]]], 6]. Используй метод flat, чтобы развернуть массив до самого глубокого уровня.*/

// let arr = [1, [2, [3, [4, 5]]], 6];
// let newArr =  arr.flat(3);
// console.log(newArr);

/*Используй метод map, чтобы получить массив покупок пользователей, а затем flat, чтобы объединить их в один массив без вложенности.*/
// const users = [
//   { name: "Alice", purchases: [1, 2] },
//   { name: "Bob", purchases: [3, [4, 5]] },
//   { name: "Charlie", purchases: [[6, 7], 8] },
// ];

// let purchases = users.map(user => user.purchases).flat(2);
// console.log(purchases);

/*Задача 1: Сложная структура вложенности
У тебя есть массив с разной глубиной вложенности:

javascript
Копировать код
const data = [1, [2, [3, [4, [5]]]], 6, [[7]], [[[8, 9]]]];
Используй метод flat, чтобы развернуть массив до самой глубокой вложенности и получить одномерный массив.*/
// const data = [1, [2, [3, [4, [5]]]], 6, [[7]], [[[8, 9]]]];
// let newArr = data.flat(4);
// console.log(newArr);

/*Задача 1 (простая):
Дан массив чисел [1, 2, 3]. Используй метод flatMap, чтобы создать новый массив, где каждое число идёт вместе со своим удвоенным значением, как в примере выше.*/
// let arr = [1, 2, 3];
// let newArr = arr.flatMap(x => [x, x * 2]);
// console.log(newArr);

/*Задача 2 (посложнее):
Дан массив строк ['a', 'b', 'c']. Используй метод flatMap, чтобы создать новый массив, где каждая строка повторяется два раза подряд. Например, для 'a' результат будет ['a', 'a'].*/

/*Задача 3 (самая сложная):
Есть массив объектов, представляющих людей и их любимые числа:

javascript
Копировать код
const people = [
  { name: 'Alice', numbers: [1, 2] },
  { name: 'Bob', numbers: [3, 4] },
  { name: 'Charlie', numbers: [5] }
];
Используй метод flatMap, чтобы получить массив всех любимых чисел людей без вложенности.*/
// const people = [
//   { name: "Alice", numbers: [1, 2] },
//   { name: "Bob", numbers: [3, 4] },
//   { name: "Charlie", numbers: [5] },
// ];
// let favoriteNum = people.flatMap(persone => persone.numbers);
// console.log(favoriteNum);

// function mult(...numbers) {
//   return numbers.reduce((acc, number) => number * acc, 1);
// }
// console.log(mult(1, 2, 3));

/*Напиши функцию, которая принимает имя человека как первый аргумент, а все последующие аргументы собирает с помощью оператора rest и выводит строку, в которой перечислены все его хобби.

Пример:

javascript
Копировать код
listHobbies('Анна', 'рисование', 'плавание', 'чтение');
Ожидаемый вывод:

Копировать код
Анна увлекается рисованием, плаванием, чтением.*/

// function func(name, ...hobbies) {
//   console.log(`${name} увлекается ${hobbies.join(", ")}.`);
// }

// func("Анна", "рисование", "плавание", "чтение");

/*Задача 3 (еще сложнее):
Напиши функцию, которая принимает объект с информацией о студенте (имя, возраст) и оценки по разным предметам в виде отдельных аргументов (используя оператор rest). Функция должна вернуть строку с информацией о студенте и его средней оценкой.

Пример:

javascript
Копировать код
studentInfo({name: 'Иван', age: 20}, 5, 4, 3, 5, 4);
Ожидаемый вывод:

Копировать код
Студент Иван, возраст 20, средняя оценка 4.2*/

/*Напиши функцию, которая принимает массив строк с именами людей, и объект с результатами голосования,
 где ключ — это имя человека, а значение — количество голосов. Функция должна вернуть объект,
  где каждому человеку из массива присвоено количество его голосов (если он голосов не получил, присвоить 0).

Пример:

javascript
Копировать код
countVotes(
  ['Анна', 'Иван', 'Мария'],
  { 'Анна': 5, 'Мария': 2 }
);
Ожидаемый вывод:

javascript
Копировать код
{
  Анна: 5,
  Иван: 0,
  Мария: 2
}
Попробуй решить эту задачу!*/

// let arr1 = [1, 2, 3, 4, 5];
// let arr2 = [6, 7, 8];

// function newArrMaker (arr1, arr2) {
//   return arr1 + ',' + arr2
// };
// console.log(newArrMaker(arr1, arr2));

// function applyDiscount(arg) {
//   return arg.map((product) => {
//     product.discountPrice = product.price - product.price * 0.1;
//     return product;
//   });
// }
// console.log(
//   applyDiscount([
//     { item: "Книга", price: 1000 },
//     { item: "Ручка", price: 50 },
//   ])
// );

// function applyDiscount(arg) {
//   let newObj = [...arg];
//   for (let i of newObj) {
//     i.discountPrice = i.price - i.price * 0.1
//   }
//   return newObj
// }

// console.log(applyDiscount([
//   { item: 'Книга', price: 1000 },
//   { item: 'Ручка', price: 50 }
// ]));

/*Отлично! Вот похожая задача, но с небольшим усложнением:

Задача:
Напиши функцию, которая принимает массив объектов с информацией о сотрудниках (каждый объект содержит имя и зарплату сотрудника).
 Функция должна возвращать новый массив, где каждому объекту добавляется новое свойство bonusSalary, представляющее собой зарплату с учётом 15% бонуса.

Пример:

javascript
Копировать код
applyBonus([
  { name: 'Анна', salary: 50000 },
  { name: 'Иван', salary: 60000 }
]);
Ожидаемый вывод:

javascript
Копировать код
[
  { name: 'Анна', salary: 50000, bonusSalary: 57500 },
  { name: 'Иван', salary: 60000, bonusSalary: 69000 }
]
Пробуй, используя оператор spread, как в предыдущей задаче!*/

// function applyBonus (arg) {
//   return arg.map((employer) => {
//     return {...employer, bonusSalary: employer.salary + employer.salary * 0.15}
//   });
// };

// console.log(applyBonus([
//   { name: "Анна", salary: 50000 },
//   { name: "Иван", salary: 60000 },
// ]));

/*Напиши функцию, которая принимает массив объектов с информацией о товарах (название товара, цена, количество на складе).
 Функция должна возвращать новый массив объектов, где каждому объекту добавляется новое свойство totalPrice,
  которое является общей стоимостью товара (цена умноженная на количество).

Пример:

javascript
Копировать код
calculateTotalPrice([
  { item: 'Книга', price: 500, quantity: 3 },
  { item: 'Ручка', price: 20, quantity: 10 }
]);
Ожидаемый вывод:

javascript
Копировать код
[
  { item: 'Книга', price: 500, quantity: 3, totalPrice: 1500 },
  { item: 'Ручка', price: 20, quantity: 10, totalPrice: 200 }
]*/
// function calculateTotalPrice (arg) {
//   return arg.map((product) =>{
//    return {...product, totalPrice: product.price * product.quantity }
//   })
// }

// console.log(calculateTotalPrice([
//   { item: 'Книга', price: 500, quantity: 3 },
//   { item: 'Ручка', price: 20, quantity: 10 }
// ]));
/*Задача 5 (продвинутый уровень):
Напиши функцию, которая принимает два массива объектов: один с информацией о товарах (название и цена),
 а другой с информацией о заказах (название товара и количество). Функция должна возвращать массив, 
 где каждому объекту из массива заказов добавляется новое свойство totalPrice, которое является общей стоимостью заказа (цена товара умноженная на количество).

Пример:

javascript
Копировать код
calculateOrderTotal(
  [
    { item: 'Книга', price: 500 },
    { item: 'Ручка', price: 20 }
  ],
  [
    { item: 'Книга', quantity: 2 },
    { item: 'Ручка', quantity: 5 }
  ]
);
Ожидаемый вывод:

javascript
Копировать код
[
  { item: 'Книга', quantity: 2, totalPrice: 1000 },
  { item: 'Ручка', quantity: 5, totalPrice: 100 }
]*/

// function calculateOrderTotal(arg1, arg2) {
//   return arg1.map((product, quantity) =>{
//     return {...arg2, totalPrice: product.price * arg2.quantity};
//   })
// }
// console.log(calculateOrderTotal(
//   [
//     { item: "Книга", price: 500 },
//     { item: "Ручка", price: 20 },
//   ],
//   [
//     { item: "Книга", quantity: 2 },
//     { item: "Ручка", quantity: 5 },
//   ]
// ));

// const person = {
//   name: 'John',
//   age: 30,
//   city: 'New York',
// };
// console.log(Object.values(person)); // ['John', 30, 'New York']
/*Первая задача (простая):
Напиши функцию, которая принимает объект с информацией о человеке (имя, возраст, город) и возвращает массив всех его ключей, используя метод Object.keys().

Пример:

javascript
Копировать код
const person = { name: 'Анна', age: 30, city: 'Москва' };
Ожидаемый вывод:

javascript
Копировать код
['name', 'age', 'city']*/

// const person = { name: "Анна", age: 30, city: "Москва" };
// console.log(Object.keys(person));

/*Вторая задача (сложнее):
Напиши функцию, которая принимает объект с информацией о товаре (название, цена, количество) и возвращает массив всех его значений, используя метод Object.values().

Пример:

javascript
Копировать код
const product = { item: 'Книга', price: 500, quantity: 3 };
Ожидаемый вывод:

javascript
Копировать код
// ['Книга', 500, 3]*/
// const product = { item: "Книга", price: 500, quantity: 3 };
// console.log(Object.values(product));

// const student = { name: "Иван", age: 20, math: 5, literature: 4 };
// console.log(Object.entries(student));

// const obj1 = { name: "Анна", age: 25 };
// const obj2 = { city: "Москва", age: 30 };

// function assign (obj1, obj2) {
//   console.log(Object.assign(obj1, obj2));
// };
// assign(obj1, obj2);

// const students = [
//   {
//     name: "Alice",
//     grades: { math: 90, physics: 85, chemistry: 87 },
//   },
//   {
//     name: "Bob",
//     grades: { math: 70, physics: 80, chemistry: 75 },
//   },
//   {
//     name: "Charlie",
//     grades: { math: 95, physics: 90, chemistry: 93 },
//   },
// ];
// let averageGradeArr = [];
// let names = []
// for (let student of students) {
//   let grade = Object.values(student.grades);
//   let summ = grade.reduce((acc, elem)=>{
//     return elem + acc;
//   },0);
//   averageGradeArr.push((summ / grade.length).toFixed(2));

// };

// for (let student of students) {
//   names.push(student.name);

// }
// console.log(names);
// console.log(averageGradeArr);
// let res = names.math(name => name)

// const books = [
//   { title: "The Hobbit", author: "J.R.R. Tolkien", pages: 310, rating: 4.7 },
//   { title: "Harry Potter", author: "J.K. Rowling", pages: 450, rating: 4.9 },
//   { title: "Twilight", author: "Stephenie Meyer", pages: 500, rating: 3.8 },
//   {
//     title: "The Great Gatsby",
//     author: "F. Scott Fitzgerald",
//     pages: 180,
//     rating: 4.2,
//   },
//   { title: "1984", author: "George Orwell", pages: 328, rating: 4.6 },
//   { title: "Moby Dick", author: "Herman Melville", pages: 720, rating: 3.5 },
// ];

// let ratingModeThan4 = books.filter(book => book.rating > 4);

// let sortPages =  ratingModeThan4.sort((a,b)=>{
//  return b.pages - a.pages
// });
// let newArr = sortPages.map(book => book.title)
// console.log(newArr);
// const users = [
//   {
//     name: "Alice",
//     subscriptions: [
//       { service: "Netflix", date: "2023-01-12" },
//       { service: "Hulu", date: "2023-02-15" },
//     ],
//   },
//   {
//     name: "Bob",
//     subscriptions: [
//       { service: "Netflix", date: "2022-12-05" },
//       { service: "Amazon Prime", date: "2023-03-10" },
//     ],
//   },
//   {
//     name: "Charlie",
//     subscriptions: [
//       { service: "Disney+", date: "2023-01-22" },
//       { service: "Netflix", date: "2023-02-01" },
//     ],
//   },
//     {name: "Alina",
//     subscriptions: [
//       { service: "Disney+", date: "2023-01-22" },
//       { service: "Hulu", date: "2023-02-01" },
//     ],
//   },
// ];

// function getSortedSubscribers(serviceName) {
//   return (
//     users
//       // 1. Фильтруем пользователей, подписанных на указанный сервис
//       .filter((user) => {
//         // Ищем подписку на данный сервис среди всех подписок пользователя
//         return user.subscriptions.some(
//           (subscription) => subscription.service === serviceName
//         );
//       })
//       .map(user)
//   );
// }

// // Пример вызова функции для сервиса "Netflix"
// console.log(getSortedSubscribers("Netflix"));


// const employees = [
//   { name: "Alice", hoursWorked: [8, 9, 8, 8, 7, 6, 0] },
//   { name: "Bob", hoursWorked: [9, 9, 10, 9, 8, 9, 0] },
//   { name: "Charlie", hoursWorked: [8, 8, 8, 8, 8, 8, 0] },
//   { name: "Dave", hoursWorked: [6, 7, 5, 6, 5, 5, 0] },
// ];

// function moreThanHours (time) {
//   let result = employees
//                         .map((employer) => {
//                           const totalHours = employer.hoursWorked.reduce((acc, hour) => acc + hour,0);
//                           return {
//                             name: employer.name,
//                             totalHours: totalHours
//                           }
//                         })
//                         .filter(hours => hours.totalHours >= time)
                         
                        
//                         const topEmployer = result.reduce((best, current) => (current.totalHours > best.totalHours ? current : best));               
//                         console.log(result, topEmployer);  
//   return result;
// };

// (moreThanHours(40));

